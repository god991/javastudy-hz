<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx" 
	   xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-4.0.xsd ">
    
    <!-- 1.配置声明式事务 -->
	<bean id="tm" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="ds" />
	</bean>
    <!-- 2.tx标签类配置哪些方法需要动态切入事务（tx标签需要手动导入）
    		tx必须参照事务管理器 -->
	<tx:advice id="ad" transaction-manager="tm">
		<tx:attributes>
			<!-- 哪些方法需要运行时动态切入事务 -->
			<tx:method name="save*" />
			<tx:method name="update*" />
			<tx:method name="delete*" />
		</tx:attributes>
	</tx:advice>	
    
    <!-- 3:配置service层的save、delete、update才执行事务 -->
    <aop:config>
    	<!-- 第一个*代表返回值，最后括号中代表参数类型,括号中的(..)代表任意多参数 -->
    	<aop:pointcut expression="execution(* cmcc.hz.service.ProductService.*(..))" id="pt"/>
    	<!-- 确定那个类使用哪个事务规则 -->
    	<aop:advisor advice-ref="ad" pointcut-ref="pt"/>
    </aop:config>
        
    
     <!-- 此工具类mybatis替换mybatisUtils，主要用来加载mybatis的主配置文件，主文件中的datasource可以删除 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="configLocation" value="classpath:mybatis.cfg.xml"></property>
    	<!-- mybatis中的datasource不能自动管理实务，因此需要将datasource交由spring管理 -->
    	<property name="dataSource" ref="ds"></property>
    </bean>
    
    <!-- 这里使用Mapper将Dao层接口和sql.xml进行绑定，并自动实例化一个DaoImpl实例 -->
    <bean id="pdao" class="org.mybatis.spring.mapper.MapperFactoryBean">
    	<!-- 绑定接口类 -->
    	<property name="mapperInterface" value="cmcc.hz.dao.ProductDaoInterface" />
    	<!-- 绑定sqlsessionFactory，创建链接. 这个属性在MapperFactoryBean的父类中 -->
    	 <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>
          
    <!-- 配置数据源 -->
	<bean id="ds" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/java-study"></property>
		<property name="user" value="root"></property>
		<property name="password" value=""></property>
		
	</bean>
	
<!-- 使用mybatis后，jdbcTemplate和Dao层都不需要了 	
	<bean id="jt" class="org.springframework.jdbc.core.JdbcTemplate">
	<property name="dataSource" ref="ds"></property>
	</bean>
	
	<bean id="pd" class="cmcc.hz.dao.ProductDao">
	    <property name="jdbcTemplate" ref="jt" />
    </bean> -->
    
    <bean id="ps" class="cmcc.hz.service.ProductService">
	    <property name="productDao" ref="pdao" />
    </bean>
	
</beans>













